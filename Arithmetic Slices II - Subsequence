//Leetcode -- 446 -- Hard
/* Given an integer array nums, return the number of all the arithmetic subsequences of nums.
A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.
For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.
Example 1:
Input: nums = [2,4,6,8,10]
Output: 7
Explanation: All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]
Example 2:
Input: nums = [7,7,7,7,7]
Output: 16
Explanation: Any subsequence of this array is arithmetic.  */

//C++ Code Below--
//Brute Force (TLE) :: T->O(exp)  , S->O(n)
#define ll long long
class Solution {
public:
    ll ans;
    int numberOfArithmeticSlices(vector<int>& nums) {
        ll n = nums.size();
        vector<ll> v;
        ans = 0;
        dfs(0, n, v, nums);
        return ans;
    }
    void dfs(int ind, int n, vector<ll>v, vector<int>&nums){
        if(ind == n){
            if(v.size() < 3){
                return;
            }
            for(int i=1; i<v.size(); i++){
                if(v[i]-v[i-1] != v[1]-v[0]){
                    return;
                }
            }
            ans++;
            return;
        }
        dfs(ind+1, n, v, nums);
        v.push_back(nums[ind]);
        dfs(ind+1, n, v, nums);
    }
};

//Approach #2 Dynamic Programming [Accepted]    :: T->O(n^2) , S->O(n^2)
#define ll long long
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        ll ans = 0;
        vector<map<ll,ll>> cnt(nums.size());
        for(int i=1; i<nums.size(); i++){
            for(int j=0; j<i; j++){
                ll del = (ll)nums[i] - (ll)nums[j];
                ll sum = 0;
                if(cnt[j].find(del) != cnt[j].end()){
                    sum = cnt[j][del];
                }
                cnt[i][del] += sum + 1;
                ans += sum;
            }
        }
        return ans;
    }
};

//Java Code Below--
//Brute Force (TLE) :: T->O(exp)  , S->O(n)
class Solution {
    private int n;
    private int ans;
    private void dfs(int dep, int[] A, List<Long> cur) {
        if (dep == n) {
            if (cur.size() < 3) {
                return;
            }
            long diff = cur.get(1) - cur.get(0);
            for (int i = 1; i < cur.size(); i++) {                
                if (cur.get(i) - cur.get(i - 1) != diff) {
                    return;
                }
            }
            ans ++;
            return;
        }
        dfs(dep + 1, A, cur);
        cur.add((long)A[dep]);
        dfs(dep + 1, A, cur);
        cur.remove((long)A[dep]);
    }
    public int numberOfArithmeticSlices(int[] A) {
        n = A.length;
        ans = 0;
        List<Long> cur = new ArrayList<Long>();
        dfs(0, A, cur);
        return (int)ans;        
    }
}

//Approach #2 Dynamic Programming [Accepted]    :: T->O(n^2) , S->O(n^2)
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int n = A.length;
        long ans = 0;
        Map<Integer, Integer>[] cnt = new Map[n];
        for (int i = 0; i < n; i++) {
            cnt[i] = new HashMap<>(i);
            for (int j = 0; j < i; j++) {
                long del = (long)A[i] - (long)A[j];
                if (del < Integer.MIN_VALUE || del > Integer.MAX_VALUE) {
                    continue;
                }
                int diff = (int)del;
                int sum = cnt[j].getOrDefault(diff, 0);
                int origin = cnt[i].getOrDefault(diff, 0);
                cnt[i].put(diff, origin + sum + 1);
                ans += sum;
            }
        }
        return (int)ans;        
    }
}
