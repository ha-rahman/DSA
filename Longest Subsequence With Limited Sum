//Leetcode -- 2389 -- Easy
//C++ Code
class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        sort(nums.begin(), nums.end());
        vector<int> ans;
        for(int q : queries)
        {
            int cnt = 0;
            for(int n : nums)
            {
                if(n <= q)
                {
                    cnt++;
                    q -= n;
                }
                else
                {
                    break;
                }
            }
            ans.push_back(cnt);
        }
        return ans;
    }
};
//2nd C++ Code
class Solution {
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        sort(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i++)
        {
            nums[i] += nums[i-1];
        }
        vector<int> ans;
        for(int q : queries)
        {
            int index = upper_bound(nums.begin(), nums.end(), q) - nums.begin();
            ans.push_back(index);
        }
        return ans;
    }
};

//Java Code --
class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int[] ans = new int[queries.length];
        for(int i=0; i<queries.length; i++)
        {
            int cnt = 0;
            for(int j=0; j<nums.length; j++)
            {
                if(nums[j] <= queries[i])
                {
                    cnt++;
                    queries[i] -= nums[j];
                }
                else
                {
                    break;
                }
            }
            ans[i] = cnt;
        }
        return ans;
    }
}
//Java 2nd Code
class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        for(int i=1; i<nums.length; i++)
        {
            nums[i] += nums[i-1];
        }
        int[] ans = new int[queries.length];
        for(int i=0; i<queries.length; i++)
        {
            int index = bs(nums, queries[i]);
            ans[i] = index;
        }
        return ans;
    }
    int bs(int[] nums, int target)
    {
        int l = 0, r = nums.length - 1;
        while(l < r)
        {
            int m = (l+r)/2;
            if(nums[m] == target) return m+1;
            else if(nums[m] < target) l = m+1;
            else r = m-1;
        }
        return nums[l] > target ? l : l+1;
    }
}

//Python3 Code--
class Solution:
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
        nums.sort()
        ans = []
        for q in queries:
            cnt = 0
            for n in nums:
                if n <= q :
                    cnt += 1
                    q -= n
                else:
                    break
            ans.append(cnt)
        return ans
