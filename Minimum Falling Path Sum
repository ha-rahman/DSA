//Leetcode -- 931 -- Medium

// C++ Code Below--
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int row = matrix.size(), col = matrix[0].size();
        for(int i=1; i<row; i++){
            for(int j=0; j<col; j++){
                if(j==0){
                    matrix[i][j] += min(matrix[i-1][j], matrix[i-1][j+1]);
                }
                else if(j==col-1){
                    matrix[i][j] += min(matrix[i-1][j-1], matrix[i-1][j]);
                }
                else{
                    matrix[i][j] += min({matrix[i-1][j-1], matrix[i-1][j], matrix[i-1][j+1]});
                }
            }
        }
        int ans = INT_MAX;
        for(int j=0; j<col; j++){
            ans = min(ans, matrix[row-1][j]);
        }
        return ans;
    }
};

// Java Code Below--
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int row=matrix.length, col=matrix[0].length;
        for(int i=1; i<row; i++){
            for(int j=0; j<col; j++){
                if(j==0){
                    matrix[i][j] += Math.min(matrix[i-1][j], matrix[i-1][j+1]);
                }
                else if(j==col-1){
                    matrix[i][j] += Math.min(matrix[i-1][j-1], matrix[i-1][j]);
                }
                else{
                    matrix[i][j] += Math.min(Math.min(matrix[i-1][j-1], matrix[i-1][j]), matrix[i-1][j+1]);
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for(int j=0; j<col; j++){
            ans = Math.min(ans, matrix[row-1][j]);
        }
        return ans;
    }
}
