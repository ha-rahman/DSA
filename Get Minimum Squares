// GFG--Medium--
/* Given a number N. Find the minimum number of squares of any number that sums to N. For Example: If N = 100 , N can be expressed as (10*10) and 
also as (5*5 + 5*5 + 5*5 + 5*5) but the output will be 1 as minimum number of square is 1 , i.e (10*10).
Example 1:
Input: N = 100
Output: 1
Explanation: 10 * 10 = 100
Example 2:
Input: N = 6
Output: 3
Explanation = 1 * 1 + 1 * 1 + 2 * 2 = 6  */

// C++ Code below--
#include<bits/stdc++.h>
using namespace std;
class Solution{
	public:
	int MinSquares(int n)
	{
	    // Code here
	    vector<int> dp(n+1, -1);
	    return dfs(n, dp);
	}
	int dfs(int n, vector<int>&dp){
	    if(n<=3) return n;
	    if(dp[n] != -1) return dp[n];
	    int ans = n;
	    for(int i=1; i*i<=n; i++){
	        ans = min(ans, 1+dfs(n-i*i, dp));
	    }
	    return dp[n] = ans;
	}
};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		Solution ob;
		int ans = ob.MinSquares(n);
		cout << ans <<"\n";
	}
	return 0;
}

//Java Code below--
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            int n = Integer.parseInt(br.readLine().trim());
            Solution ob = new Solution();
            int ans = ob.MinSquares(n);
            System.out.println(ans);           
        }
    }
}
class Solution
{
    public int MinSquares(int n)
    {
        // Code here
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        return dfs(n, dp);
    }
    int dfs(int n, int[] dp){
        if(n<=3) return n;
        if(dp[n] != -1) return dp[n];
        int ans = n;
        for(int i=1; i*i<=n; i++){
            ans = Math.min(ans, 1+dfs(n-i*i, dp));
        }
        return dp[n] = ans;
    }
}
