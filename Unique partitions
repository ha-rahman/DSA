/* Given a positive integer n, generate all possible unique ways to represent n as sum of positive integers.
Note: The generated output is printed without partitions. Each partition must be in decreasing order. Printing of all the partitions is done in reverse sorted order. 
Example 1:
Input: n = 3
Output: 3 2 1 1 1 1
Explanation: For n = 3, 
{3}, {2, 1} and {1, 1, 1}.
Example 2:
Input: n = 4 
Output: 4 3 1 2 2 1 1 1 1 
Explanation: For n = 4, 
{4}, {3, 1}, {2, 2}, {1, 1, 1, 1}.  */

// C++ Code Below--
#include<bits/stdc++.h>
using namespace std;
class Solution{
	public:
	vector<vector<int>> ans;
	void dfs(int n, vector<int>&v, int pre){
	    if(n == 0) ans.push_back(v);
	    for(int i=min(n, pre); i>=1; i--){
	        v.push_back(i);
	        dfs(n-i, v, i);
	        v.pop_back();
	    }
	}
    vector<vector<int>> UniquePartitions(int n) {
        // Code here
        vector<int> v;
        dfs(n, v, n+1);
        return ans;
    }
};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		Solution ob;
		vector<vector<int>> ans = ob.UniquePartitions(n);
    	for(auto i : ans)
    		for(auto j: i)
    			cout << j <<" ";
    	cout << "\n";
	}  
	return 0;
}
