//Leetcode -- 309 -- Medium
//C++ Code Below--
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        return f(0, 1, prices,dp);
    }
    int f(int ind, int buy, vector<int> &prices, vector<vector<int>> &dp)
    {
        if(ind >= prices.size()) return 0;
        if(dp[ind][buy] != -1) return dp[ind][buy];
        if(buy == 1)
        {
            return dp[ind][buy] = max(-prices[ind] + f(ind+1, 0, prices, dp), 0 + f(ind+1, 1, prices, dp));
        }
        else{
            return dp[ind][buy] = max(prices[ind] + f(ind+2, 1, prices, dp), 0 + f(ind+1, 0, prices, dp));
        }
    }
};

//Java Code--
class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        for(int[] d : dp){
            Arrays.fill(d, -1);
        }
        return f(0, 1, prices, dp);
    }
    int f(int ind, int buy, int[] prices, int[][] dp)
    {
        if(ind >= prices.length) return 0;
        if(dp[ind][buy] != -1) return dp[ind][buy];
        if(buy == 1)
        {
            return dp[ind][buy] = Math.max(-prices[ind] + f(ind+1, 0, prices, dp), 0 + f(ind+1, 1, prices, dp));
        }
        else{
            return dp[ind][buy] = Math.max(prices[ind] + f(ind+2, 1, prices, dp), 0 + f(ind+1, 0, prices, dp));
        }
    }
}
