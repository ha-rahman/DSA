// C++ Code below
class Solution {
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        int n=grid.size(), m=grid[0].size(), ans=0;
        vector<vector<int>> vis(n, vector<int>(m, INT_MIN));
        queue<array<int, 3>> q;
        q.push({0, 0, k});
        int dx[4] = {0, 1, 0, -1};
        int dy[4] = {1, 0, -1, 0};
        vis[0][0] = k;
        while(!q.empty()){
            int sz = q.size();
            while(sz-- > 0){
                auto it = q.front();
                q.pop();
                int x = it[0], y = it[1];
                if(x==n-1 && y==m-1) return ans;
                for(int i=0; i<4; i++){
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if(nx<0 || nx>=n || ny<0 || ny>=m){
                        continue;
                    }
                    int obs = it[2] - grid[nx][ny];
                    if(obs >= 0 && vis[nx][ny] < obs){
                        q.push({nx, ny, obs});
                        vis[nx][ny] = obs;
                    }
                }
            }
            ans++;
        }
        return -1;
    }
};

// Java Code below
class Solution {
    public int shortestPath(int[][] grid, int k) {
        int n=grid.length, m=grid[0].length, ans=0;
        int[][] vis = new int[n][m];
        for(int[] row : vis){
            Arrays.fill(row, Integer.MIN_VALUE);
        }
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0, k});
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        vis[0][0] = k;
        while(!q.isEmpty()){
            int sz = q.size();
            while(sz-- > 0){
                int[] it = q.poll();
                int x = it[0], y = it[1];
                if(x==n-1 && y==m-1) return ans;
                for(int i=0; i<4; i++){
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if(nx<0 || nx>=n || ny<0 || ny>=m){
                        continue;
                    }
                    int obs = it[2] - grid[nx][ny];
                    if(obs >= 0 && vis[nx][ny] < obs){
                        q.offer(new int[]{nx, ny, obs});
                        vis[nx][ny] = obs;
                    }
                }
            }
            ans++;
        }
        return -1;
    }
}
