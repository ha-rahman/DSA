//GFG -- Medium

//C++ Code Below
#include <bits/stdc++.h>
using namespace std;
long long numOfWays(int n, int m);
int main() {
    // code
    int T;
    cin >> T;
    while (T--) {
        int n, m;
        cin >> n >> m;
        cout << numOfWays(n, m) << endl;
    }
    return 0;
}
long long numOfWays(int n, int m)
{
    // write code here
    int dx[] = {2, 2, 1, 1, -1, -1, -2, -2};
    int dy[] = {-1, -1, -2, 2, -2, 2, -1, 1};
    
    long mod = 1000000007;
    long total = ((n*m)%mod * (n*m-1)%mod)%mod;
    long attack = 0;
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            for(int k=0; k<8; k++){
                int x = i + dx[k];
                int y = j + dy[k];
                
                if(x>=0 && x<n && y>=0 && y<m) attack++;
            }
        }
    }
    return (total%mod - attack%mod)%mod;
}

// Optimize code-- O(1)
#include <bits/stdc++.h>
using namespace std;
long long numOfWays(int n, int m);
int main() {
    // code
    int T;
    cin >> T;
    while (T--) {
        int n, m;
        cin >> n >> m;
        cout << numOfWays(n, m) << endl;
    }
    return 0;
}
long long numOfWays(int n, int m)
{
    // write code here
    long mod = 1000000007;
    long total = ((n*m)%mod * (n*m-1)%mod)%mod;
    
    if(n>=1 && m>=2) total -= 4*(n-1)*(m-2);
    if(m>=1 && n>=2) total -= 4*(m-1)*(n-2);
    
    return total;
}
