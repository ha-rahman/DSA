//Leetcode--151--Medium
/* Given an input string s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
Return a string of the words in reverse order concatenated by a single space.
Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.
Example 1:
Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:
Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:
Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.    */

//C++ Code below without stack
class Solution {
public:
    string reverseWords(string s) {
        string ans;
        for(int i=0; i<s.size(); i++){
            if(s[i]==' ') continue;
            string str;
            while(i<s.size() && s[i]!=' '){
                str += s[i];
                i++;
            }
            if(ans.empty()) ans = str;
            else ans = str+" "+ans;
        }
        return ans;
    }
};
// C++ Code with stack
class Solution {
public:
    string reverseWords(string s) {
        if(s.size()==0) return s;
        stack<string> st;
        for(int i=0; i<s.size(); i++){
            string str;
            if(s[i]==' ') continue;
            while(i<s.size() && s[i]!=' '){
                str += s[i];
                i++;
            }
            st.push(str);
        }
        string ans;
        while(!st.empty()){
            ans += st.top();
            st.pop();
            if(!st.empty()) ans += " ";
        }
        return ans;
    }
};

//Java Code below--
class Solution {
    public String reverseWords(String s) {
        Stack<String> st = new Stack<String>();
        for(String str : s.trim().split(" ")){
            if(!str.isEmpty()) st.push(str);
        }
        StringBuilder ans = new StringBuilder();
        while(!st.isEmpty()){
            ans.append(st.pop());
            ans.append(" ");
        }
        return ans.toString().trim();
    }
}

//Python Code Below--
class Solution:
    def reverseWords(self, s: str) -> str:
        return " ".join(s.split()[::-1])
