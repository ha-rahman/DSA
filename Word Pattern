//Leetcode -- 290 -- Easy

//C++ Code Below-
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        vector<string> v;
        int i=0;
        string temp = " ";
        while(i < s.size()){
            if(s[i] == ' '){
                v.push_back(temp);
                temp = " ";
            }
            else{
                temp += s[i];
            }
            i++;
        }
        v.push_back(temp);
        if(v.size() != pattern.size()){
            return false;
        }
        unordered_map<char, string> m;
        set<string> st;
        for(int i=0; i<pattern.size(); i++){
            if(m.find(pattern[i]) != m.end()){
                if(m[pattern[i]] != v[i]){
                    return false;
                }
            }
            else{
                if(st.count(v[i]) > 0){
                    return false;
                }
                m[pattern[i]] = v[i];
                st.insert(v[i]);
            }
        }
        return true;
    }
};

//Java Code below
class Solution {
    public boolean wordPattern(String pattern, String s) {
        String [] arr = s.split(" ");
        if(pattern.length()!=arr.length)return false;
        HashMap<Character,String> map = new HashMap<>(); 
        for(int i = 0; i<pattern.length(); i++)
        {
            char ch = pattern.charAt(i);
            boolean containsKey = map.containsKey(ch);
            if(map.containsValue(arr[i]) && !containsKey)
                return false;
            if(containsKey && !map.get(ch).equals(arr[i]))
                return false;
            else
                map.put(ch,arr[i]);
        }
        return true;
    }
}
