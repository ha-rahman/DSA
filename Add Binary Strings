// GFG -- Medium
/* Given two binary strings A and B consisting of only 0s and 1s. Find the resultant string after adding the two Binary Strings.
Note: The input strings may contain leading zeros but the output string should not have any leading zeros.
Example 1:
Input:
A = "1101", B = "111"
Output: 10100
Explanation:
 1101
+ 111
10100
Example 2:
Input: 
A = "10", B = "01"
Output: 11
Explanation: 
  10
+ 01
  11   */
  

//C++ Code Below--

#include<bits/stdc++.h>
using namespace std;
class Solution{
public:	
	string addBinary(string A, string B)
	{
	    // your code here
	    int i=A.size()-1, j=B.size()-1;
	    string ans = "";
	    int carry = 0;
	    while(i>=0 || j>=0){
	        int x = carry;
	        if(i>=0) x += (A[i]-'0');
	        if(j>=0) x += (B[j]-'0');
	        if(x == 0){
	            ans.push_back('0');
	            carry = 0;
	        }
	        else if(x==1){
	            ans.push_back('1');
	            carry = 0;
	        }
	        else if(x==2){
	            ans.push_back('0');
	            carry = 1;
	        }
	        else if(x==3){
	            ans.push_back('1');
	            carry = 1;
	        }
	        i--;
	        j--;
	    }
	    if(carry){
	        ans.push_back('1');
	    }
	    reverse(ans.begin(), ans.end());
	    i = 0;
	    while(ans[i] == '0'){
	        ans.erase(ans.begin());
	    }
	    return ans;
	}
};
int main()
{
	int t; cin >> t;
	while (t--)
	{
		string A, B; cin >> A >> B;
		Solution ob;
		cout << ob.addBinary (A, B);
		cout << "\n";
	}
}
