/* We have a string s of length n, which contains only UPPERCASE characters and we have a number k (always less than n). We can make at most k changes in our string. In one change, you can replace any s[i] (0<= i < n) with any uppercase character (from 'A' to 'Z'). After k changes, find the maximum possible length of the sub-string which have all same characters.
Example 1:
Input: s = "ABAB", k = 2
Output: 4
Explanation: Change 2 'B' into 'A'. 
Now s = "AAAA"
Example:
Input: s = "ADBD", k = 1
Output: 3
Explanation: Change 'B' into 'D'.
Now s = "ADDD"  */

// C++ Code below--
#include<bits/stdc++.h>
using namespace std;
class Solution {
	public:
		int characterReplacement(string s, int k){
		    // Code here
		    int ans = 0, l = 0;
		    vector<int> v(26);
		    for(int i=0; i<s.size(); i++){
		        v[s[i]-'A']++;
		        int op = i-l+1-*max_element(v.begin(), v.end());
		        if(op > k){
		            v[s[l]-'A']--;
		            l++;
		        }
		        else{
		            ans = max(ans, i-l+1);
		        }
		    }
		    return ans;
		}

};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		string s;
		cin >> s;
		int k;
		cin >> k;
		Solution obj;
		int ans = obj.characterReplacement(s, k);
		cout << ans << "\n";
	}
	return 0;
}
