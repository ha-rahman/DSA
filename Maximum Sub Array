// GFG -- Medium
/* Find out the maximum sub-array of non negative numbers from an array.
The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.
Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).
Example:
a = [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]  */

//C++ Code Below--
#include <bits/stdc++.h>
using namespace std;
class Solution{
public:
	vector<int> findSubarray(int a[], int n) {
	    // code here
	    int max_sum = 0, cur_sum = 0, start = 0, end = -1, i=0;
	    for(int j=0; j<n; j++){
	        if(a[j] >= 0){
	            cur_sum += a[j];
	        }
	        else{
	            cur_sum = 0;
	            i = j+1;
	        }
	        if(max_sum <= cur_sum){
	            max_sum = max(max_sum, cur_sum);
    	        start = i;
    	        end = j;
	        }
	    }
	    vector<int> ans;
	    for(int i=start; i<=end; i++){
	        ans.push_back(a[i]);
	    }
	    if(start>end) ans.push_back(-1);
	    return ans;
	}
};
void printAns(vector<int> &ans) {
    for (auto &x : ans) {
        cout << x << " ";
    }
    cout << "\n";
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int a[n];
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findSubarray(a, n);
        printAns(ans);
    }
    return 0;
}
