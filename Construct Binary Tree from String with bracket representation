//GFG--Medium
/* Construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the roots value and a pair of parenthesis contains a child binary tree with the same structure. Always start to construct the left child node of the parent first if it exists.
Example 1:
Input: "1(2)(3)" 
Output: 2 1 3
Explanation:
           1
          / \
         2   3
Explanation: first pair of parenthesis contains 
left subtree and second one contains the right 
subtree. Inorder of above tree is "2 1 3".
Example 2:
Input: "4(2(3)(1))(6(5))"
Output: 3 2 1 4 5 6
Explanation:
           4
         /   \
        2     6
       / \   / 
      3   1 5     */


//C++ Code Below--
#include <bits/stdc++.h>
using namespace std;
/* A binary tree node has data, pointer to left
child and a pointer to right child */
class Node
{
public:
    int data;
    Node *left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = NULL;
    }
};
void inorder(Node *root)
{
    if (root == NULL)
        return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}
/*
class Node
{
public:
    int data;
    Node *left, *right;
    Node(int data)
    {
        this->data = data;
        this->left = this->right = NULL;
    }
};
*/
class Solution{
public:
    // function to construct tree from string
    Node *treeFromString(string str){
        // code here
        stack<int> st;
        map<int, Node*> m;
        for(int i=0; i<str.size(); i++){
            if(str[i] == ')'){
                int child = st.top();
                Node * c;
                if(m.find(child) == m.end()){
                    c = new Node(child);
                }
                else{
                    c = m[child];
                }
                st.pop();
                int parent = st.top();
                if(m.find(parent)==m.end()){
                    Node* p = new Node(parent);
                    p->left = c;
                    m[parent] = p;
                }
                else{
                    Node* p = m[parent];
                    p->right = c;
                }
            }
            else{
                int num = 0;
                if(str[i] == '('){
                    continue;
                }
                else{
                    while(isdigit(str[i])){
                        num = num*10+(str[i]-'0');
                        i++;
                    }
                    i--;
                    st.push(num);
                }
            }
        }
        if(m.size() == 0) return new Node(st.top());
        return m[st.top()];
    }
};
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        string str;
        cin >> str;
        Solution obj;
        Node *root = obj.treeFromString(str);
        inorder(root);
        cout << "\n";
    }
    return 0;
}
