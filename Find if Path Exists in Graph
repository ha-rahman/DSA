// Leetcode -- 1971 -- Easy

//C++ Code
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        unordered_map<int, vector<int>> graph;
        for(auto x : edges)
        {
            graph[x[0]].push_back(x[1]);
            graph[x[1]].push_back(x[0]);
        }
        vector<bool> vis(n);
        vis[source] = true;
        queue<int> q;
        q.push(source);
        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            if(node == destination) return true;
            for(int x : graph[node])
            {
                if(!vis[x])
                {
                    vis[x] = true;
                    q.push(x);
                }
            }
        }
        return false;
    }
};

//Java Code--
class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int[] x : edges)
        {
            graph.computeIfAbsent(x[0], val -> new ArrayList<Integer>()).add(x[1]);
            graph.computeIfAbsent(x[1], val -> new ArrayList<Integer>()).add(x[0]);
        }
        boolean[] vis = new boolean[n];
        vis[source] = true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(source);
        while(!q.isEmpty())
        {
            int node = q.poll();
            if(node == destination) return true;
            for(int x : graph.get(node))
            {
                if(!vis[x])
                {
                    vis[x] = true;
                    q.offer(x);
                }
            }
        }
        return false;
    }
}
