// GFG -- Hard
//C++ Code
#include<bits/stdc++.h>
using namespace std;
class Solution {
  public:
    void dfs(int node, vector<int>&dis, vector<int>&low, vector<bool>&vis, int par, vector<int>adj[], int timer, vector<int>&art){
        vis[node] = true;
        dis[node] = low[node] = timer++;
        int child = 0;
        for(auto &x : adj[node]){
            if(x==par) continue;
            if(vis[x]==false){
                dfs(x, dis, low, vis, node, adj, timer, art);
                low[node] = min(low[node], low[x]);
                if(low[x]>=dis[node] && par != -1){
                    art[node] = 1;
                }
                child++;
            }
            else{
                low[node] = min(low[node], dis[x]);
            }
        }
        if(par == -1&& child>1){
            art[node] = 1;
        }
    }
    vector<int> articulationPoints(int n, vector<int>adj[]) {
        // Code here
        vector<int> dis(n, -1);
        vector<int> low(n, -1);
        vector<bool> vis(n, 0);
        int timer = 0;
        vector<int> art(n, 0);
        dfs(0, dis, low, vis, -1, adj, timer, art);
        vector<int> ans;
        for(int i=0; i<n; i++){
            if(art[i]==1){
                ans.push_back(i);
            }
        }
        if(ans.size()==0) ans.push_back(-1);
        return ans;
    }
};
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		vector<int> ans = obj.articulationPoints(V, adj);
		for(auto i: ans)cout << i << " ";
		cout << "\n";
	}
	return 0;
}
