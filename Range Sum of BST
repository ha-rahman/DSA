// Leetcode -- 938 -- Easy

//C++ Code Below-
// dfs
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;
    int rangeSumBST(TreeNode* root, int low, int high) {
        ans = 0;
        dfs(root, low, high);
        return ans;
    }
    void dfs(TreeNode* root, int low, int high){ 
        if(root != NULL){
            if(root->val>=low && root->val<=high){
                ans += root->val;
            }
            if(root->left) dfs(root->left, low, high);
            if(root->right) dfs(root->right, low, high);
        }
    }
};

// C++ Code Using Stack
//Inorder
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(!root) return 0;
        return inorder(root, low, high);
    }
    int inorder(TreeNode* root, int low, int high){
        if(root){
            inorder(root->left, low, high);
            if(root->val >= low && root->val <= high){
                ans += root->val;
            }
            inorder(root->right, low, high);
        }
        return ans;
    }
};

// Java Code-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans = 0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root == null) return 0;
        if(root != null){
            rangeSumBST(root.left, low, high);
            if(root.val >= low && root.val <= high){
                ans += root.val;
            }
            rangeSumBST(root.right, low, high);
        }
        return ans;
    }
}

// Java Code Below using stack;
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        int ans = 0;
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode node = s.pop();
            if(node != null){
                if(node.val >= low && node.val <= high){
                    ans += node.val;
                }
                if(node.val > low) s.push(node.left);
                if(node.val < high) s.push(node.right);
            }
        }
        return ans;
    }
}

// DFS
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans;
    public int rangeSumBST(TreeNode root, int low, int high) {
        ans = 0;
        dfs(root, low, high);
        return ans;
    }
    void dfs(TreeNode root, int low, int high){ 
        if(root != null){
            if(root.val>=low && root.val<=high){
                ans += root.val;
            }
            if(root.left != null) dfs(root.left, low, high);
            if(root.right != null) dfs(root.right, low, high);
        }
    }
}
