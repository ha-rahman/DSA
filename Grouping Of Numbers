//GFG Medium
/* One day Jim came across array arr[] of N numbers. He decided to divide these N numbers into different groups. Each group contains numbers in which 
sum of any two numbers should not be divisible by an integer K. Print the size of the group containing maximum numbers.
Example 1:
Input:
N = 4, K = 8
arr[] = {1, 7, 2, 6}
Output:
2
Explanation:
The  group of numbers which can be formed
are: (1),(2),(7),(6),(1,2),(1,6),(7,2),(7,6).
So,the maximum possible size of the group is 2.
Example 2:
Input:
N = 2, K = 3
arr[] = {1, 2}
Output:
1
Explanation:
The  group of numbers which can be formed
are: (1),(2). So,the maximum possible size
of the group is 1.   */

//C++ Code below--
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    int maxGroupSize(int arr[], int N, int K) {
        // code here
        vector<int> dp(K, 0);
        for(int i=0; i<N; i++){
            int remain = arr[i]%K;
            dp[remain]++;
        }
        int ans = 0;
        int l = 1, r = K-1;
        while(l < r){
            ans += max(dp[l], dp[r]);
            l++, r--;
        }
        if(l == r && dp[l] != 0){
            ans++;
        }
        if(dp[0] > 0){
            ans++;
        }
        return ans;
    }
};
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N,K;
        
        cin>>N>>K;
        int arr[N];
        
        for(int i=0; i<N; i++)
            cin>>arr[i];

        Solution ob;
        cout << ob.maxGroupSize(arr,N,K) << endl;
    }
    return 0;
}
