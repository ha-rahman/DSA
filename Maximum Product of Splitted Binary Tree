//LeetCode -- 1339 -- Medium

//C++ Code Below-
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long ans=0, totalSum, mod = 1e9+7;
    int maxProduct(TreeNode* root) {
        totalSum = solve(root);
        solve(root);
        return ans%mod;
    }
    int solve(TreeNode* root){
        if(root==NULL) return 0;
        long sum = root->val + solve(root->left) + solve(root->right);
        ans = max(ans, sum*(totalSum-sum));
        return sum;
    }
};

//Java Code Below-
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    long ans = 0, totalSum = 0;
    public int maxProduct(TreeNode root) {
        totalSum = solve(root);
        solve(root);
        return (int)(ans%((int)1e9+7));
    }
    long solve(TreeNode root){
        if(root == null) return 0;
        long sum = root.val + solve(root.left) + solve(root.right);
        ans = Math.max(ans, sum*(totalSum-sum));
        return sum;
    }
}

//Python3 Code Below--
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxProduct(self, root: Optional[TreeNode]) -> int:
        self.ans = totalSum = 0
        def solve(root):
            if not root:
                return 0
            sum = root.val + solve(root.left) + solve(root.right)
            self.ans = max(self.ans, sum*(totalSum-sum))
            return sum
        totalSum = solve(root)
        solve(root)
        return self.ans % (10**9+7)
