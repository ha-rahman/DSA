// Leetcode -- 1026 -- Medium

//C++ Code Below--
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;
    int maxAncestorDiff(TreeNode* root) {
        if(root==NULL) return 0;
        ans = 0;
        f(root, root->val, root->val);
        return ans;
    }
    void f(TreeNode* root, int curMax, int curMin){
        if(root == NULL) return;
        int possibleAns = max(abs(curMax-root->val), abs(curMin-root->val));
        ans = max(ans, possibleAns);
        curMax = max(curMax, root->val);
        curMin = min(curMin, root->val);
        f(root->left, curMax, curMin);
        f(root->right, curMax, curMin);
    }
};

//Java Code Below--
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans;
    public int maxAncestorDiff(TreeNode root) {
        if(root==null) return 0;
        ans = 0;
        f(root, root.val, root.val);
        return ans;
    }
    void f(TreeNode root, int curMax, int curMin){
        if(root==null) return;
        int possibleAns = Math.max(Math.abs(curMax-root.val), Math.abs(curMin-root.val));
        ans = Math.max(ans, possibleAns);
        curMax = Math.max(curMax, root.val);
        curMin = Math.min(curMin, root.val);
        f(root.left, curMax, curMin);
        f(root.right, curMax, curMin);
    }
}

//Python Code Below--
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        self.ans = 0
        def f(node, curMax, curMin):
            if not node:
                return
            self.ans = max(self.ans, abs(curMax-node.val), abs(curMin-node.val))
            curMax = max(curMax, node.val)
            curMin = min(curMin, node.val)
            f(node.left, curMax, curMin)
            f(node.right, curMax, curMin)
        f(root, root.val, root.val)
        return self.ans
