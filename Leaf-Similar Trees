//Leetcode -- 872 -- Easy

//C++ Code Below
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> v1, v2;
        dfs(root1, v1);
        dfs(root2, v2);
        return v1==v2;
    }
    void dfs(TreeNode* root, vector<int>&v){
        if(root==NULL) return;
        if(root->left==NULL && root->right==NULL) v.push_back(root->val);
        dfs(root->left, v);
        dfs(root->right, v);
    }
};

//Java Code Below--
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> v1 = new ArrayList<>();
        List<Integer> v2 = new ArrayList<>();
        dfs(root1, v1);
        dfs(root2, v2);
        return v1.equals(v2);
    }
    void dfs(TreeNode root, List<Integer> v){
        if(root==null) return;
        if(root.left==null && root.right==null) v.add(root.val);
        dfs(root.left, v);
        dfs(root.right, v);
    }
}

//Python3 Code Below--
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        def dfs(root):
            if root:
                if not root.left and not root.right:
                    yield root.val
                yield from dfs(root.left)
                yield from dfs(root.right)
        return list(dfs(root1)) == list(dfs(root2))
