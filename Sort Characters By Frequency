// Leetcode -- 451 -- Medium

//C++ Code Below-
class Solution {
public:
    bool static comp(pair<char, int>&a, pair<char, int>&b)
    {
        return a.second > b.second;
    }
    string frequencySort(string s)
    {
        unordered_map<char, int> mp;
        for(char c: s)
            mp[c]++;
        vector<pair<char, int>> v(mp.begin(), mp.end());
        sort(v.begin(), v.end(), comp);
        string ans = "";
        for(pair<char, int> p : v)
        {
            for(int i=0; i<p.second; i++){
                ans += p.first;
            }
        }
        return ans;
    }
};

//Java Code Below-
class Solution {
    public String frequencySort(String s) {
        HashMap<Character, Integer> mp = new HashMap<>();
        for(int i=0; i<s.length(); i++){
            char c = s.charAt(i);
            mp.put(c, mp.getOrDefault(c, 0)+1);
        }
        List<Map.Entry<Character, Integer>> lp = new ArrayList<>(mp.entrySet());
        Collections.sort(lp, new Comparator<Map.Entry<Character, Integer>>(){
            public int compare(Map.Entry<Character, Integer> a, Map.Entry<Character, Integer> b){
                return b.getValue() - a.getValue();
            }
        });
        StringBuilder sb = new StringBuilder();
        for(Map.Entry<Character, Integer> x : lp){
            for(int i=0; i<x.getValue(); i++){
                sb.append(x.getKey());
            }
        }
        return sb.toString();
    }
}
