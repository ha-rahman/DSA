//Leetcode--79--Medium
/* Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false   */

//C++ Code Below--
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        for(int i=0; i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                if(dfs(0, i, j, board, word))
                    return true;
            }
        }
        return false;
    }
    bool dfs(int ind, int row, int col, vector<vector<char>>&board, string &word){
        if(word.size() == ind)
            return true;
        if(row<0 || col<0 || row>=board.size() || col>=board[0].size() || board[row][col]=='.' || board[row][col]!=word[ind])
            return false;
        int temp = board[row][col];
        board[row][col] = '.';
        if(dfs(ind+1, row+1, col, board, word) || dfs(ind+1, row-1, col, board, word) || dfs(ind+1, row, col+1, board, word) || dfs(ind+1, row, col-1, board, word))
            return true;
        board[row][col] = temp;
        return false;
    }
};

//Java Code Below--
class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[0].length; j++){
                if(dfs(0, i, j, board, word)){
                    return true;
                }
            }
        }
        return false;
    }
    boolean dfs(int ind, int row, int col, char[][] board, String word){
        if(ind == word.length()) return true;
        if(row<0 || col<0 || row>=board.length || col>=board[0].length || board[row][col]=='.' || board[row][col]!=word.charAt(ind)){
            return false;
        }
        char c = board[row][col];
        board[row][col] = '.';
        if(dfs(ind+1,row+1,col,board,word) || dfs(ind+1,row-1,col,board,word) || dfs(ind+1,row,col+1,board,word) || dfs(ind+1,row,col-1,board,word)){
            return true;
        }
        board[row][col] = c;
        return false;
    }
}

//Python3 Code Below--
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if not board:
            return False
        for i in range(0, len(board)):
            for j in range(0, len(board[0])):
                if self.dfs(i, j, board, word):
                    return True
        return False
    def dfs(self, row, col, board, word):
        if len(word)==0:
            return True
        if(row<0 or col<0 or row>=len(board) or col>=len(board[0]) or word[0]!=board[row][col]):
            return False
        temp = board[row][col]
        board[row][col] = '.'
        ans = self.dfs(row+1, col, board, word[1:]) or self.dfs(row-1, col, board, word[1:]) or self.dfs(row, col+1, board, word[1:]) or self.dfs(row, col-1, board, word[1:])
        board[row][col] = temp
        return ans
