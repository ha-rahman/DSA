/* Given a positive number X. Find the largest Jumping Number which is smaller than or equal to X. 
Jumping Number: A number is called Jumping Number if all adjacent digits in it differ by only 1. All single-digit numbers are considered as Jumping Numbers. For example 7, 8987 and 4343456 are Jumping numbers but 796, 677 and 89098 are not.
Example 1:
Input:
X = 10
Output:
10
Explanation:
10 is the largest Jumping Number
possible for X = 10.
Example 2:
Input:
X = 50
Output:
45
Explanation:
45 is the largest Jumping Number
possible for X = 50.      */

//C++ Code below-
#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    void bfs(long long i, long long &ans, long long x){
        queue<long long> q;
        q.push(i);
        while(!q.empty()){
            long long num = q.front();
            q.pop();
            if(num <= x){
                ans = max(ans, num);
                int last_digit = num%10;
                if(last_digit == 0){
                    q.push((num*10)+1);
                }
                else if(last_digit==9){
                    q.push((num*10)+8);
                }
                else{
                    q.push((num*10)+(last_digit-1));
                    q.push((num*10)+(last_digit+1));
                }
                
            }
        }
    }
    long long jumpingNums(long long X) {
        // code here
        long long ans = 0;
        if(X <= 10){
            return X;
        }
        else{
            for(int i=1; i<=9; i++){
                bfs(i, ans, X);
            }
        }
        return ans;
    }
};
int main() {
    int t;
    cin >> t;
    while (t--) {
        long long X;
        
        cin>>X;

        Solution ob;
        cout << ob.jumpingNums(X) << endl;
    }
    return 0;
}
