//Leetcode --Easy-- 1704
/* You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.
Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.
Return true if a and b are alike. Otherwise, return false.
Example 1:
Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.
Example 2:
Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.  */

//C++ Code Below--
class Solution {
public:
    bool halvesAreAlike(string s) {
        set<char> st = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
        int i=0, j=s.size()/2, cnt=0;
        while(j<s.size()){
            if(st.find(s[i])!=st.end()) cnt++;
            if(st.find(s[j])!=st.end()) cnt--;
            i++;
            j++;
        }
        return cnt==0;
    }
};

//Java Code Below--
class Solution {
    public boolean halvesAreAlike(String s) {
        HashSet<Character> st = new HashSet<>();
        for(char c : "aeiouAEIOU".toCharArray()){
            st.add(c);
        }
        int i=0, j=s.length()/2, cnt = 0;
        while(j<s.length()){
            if(st.contains(s.charAt(i))) cnt++;
            if(st.contains(s.charAt(j))) cnt--;
            i++;
            j++;
        }
        return cnt==0;
    }
}
