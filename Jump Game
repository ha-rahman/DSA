//Leetcode -- 55 -- Medium
//C++ Code Below--
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int reachable = 0;
        for(int i=0; i<n; i++){
            if(reachable < i)
                return false;
            reachable = max(reachable, i+nums[i]);
        }
        return true;
    }
};

//C code--
bool canJump(int* nums, int numsSize){
    int reachable = 0;
    for(int i=0; i<numsSize; i++)
    {
        if(reachable < i) return false;
        reachable = fmax(reachable, i+nums[i]);
    }
    return true;
}

//Java Code --
class Solution {
    public boolean canJump(int[] nums) {
        int reachable = 0;
        for(int i=0; i<nums.length; i++)
        {
            if(reachable < i) return false;
            reachable = Math.max(reachable, i+nums[i]);
        }
        return true;
    }
}

//Python3 Code--
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        reachable = 0
        for i in range(0, len(nums)):
            if reachable < i: return False
            reachable = max(reachable, i+nums[i])
        return True
